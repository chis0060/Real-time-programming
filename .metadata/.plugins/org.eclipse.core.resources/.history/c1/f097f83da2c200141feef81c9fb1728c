#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <pthread.h>
#include <signal.h>
#include <time.h>

#include "Pressure.h"
#include "Monitor.h"
/* Definitions */
#define MAX_PRESSURE 80
/* Function prototypes */
void * sensorThread(void *);
void * readerThread(void *);
void sigint_handler(int);
void mem_clean(void);
static Monitor monitor;
/* Main */
int main(int argc, char *argv[]) {
	int numThreads = 0;			// number of requested threads
	int ret_val;				// error checker

	signal(SIGUSR1, sigint_handler);

	/* Prompt for number of threads to create */
	printf("How many sensors would you like to create?\n");
	scanf("%d\n", &numThreads);

	ret_val = monitor_init(&monitor, numThreads, sensorThread, readerThread);
	/*if(ret_val)
		return EXIT_FAILURE;*/

	while(monitor.available) {

		if(monitor.release) {
			int id = monitor.release_id;
			//int pressure = monitor.pressure_reading;

			printf("Reader %d - Sensor %d has reached %d psi!\n", monitor.release_id+1, id+1, monitor.pressure_reading);
			printf("Pausing: Releasing pressure on Sensor %d\n", monitor.release_id+1);
			sleep(5);
			printf("System resuming operation\n");


			monitor.release = 0;
		}
	}
	printf("Shutting down system.\n");
	mem_clean();
	return EXIT_SUCCESS;

} // Main
/* Sensors */
void * sensorThread(void *sensor) {
	Pressure *pressure = (Pressure *) sensor;
	int new_pressure;
	//int rando;
	time_t curr_time;

		srand(time(&curr_time));
		/*new_pressure = rand() % 100;
		set_pressure(pressure, new_pressure);*/

	while(monitor.available) {
		if(monitor.release) {
			sleep(1);
			//printf("Sensor Working\n");
			continue;

		}
		new_pressure = rand() % 100;
		set_pressure(pressure, new_pressure);
		printf("Sensor %d - new pressure = %d\n" ,pressure->id,  new_pressure);
		sleep(1);
	}
	return NULL;
}
/* Readers */
void * readerThread(void *reader) {

	Pressure *pressure = (Pressure *) reader;
	int psi;

	while(monitor.available) {
		if(monitor.release) {
			sleep(1);
			//printf("Reader Working\n");
			continue;
		}

		if(80 <= (psi = get_pressure(pressure))) {
			printf("Reader %d read %d psi\n",pressure->id, psi);
			monitor.release_id = pressure->id;
			monitor.pressure_reading = psi;
			monitor.release = 1;
		}

	}
	return NULL;

}
/* Signal handler */
void sigint_handler(int sig) {
	if(SIGUSR1 == sig) {
		printf("Caught You!\n");
		monitor.available = 0;
	}
}

void mem_clean(void) {
	monitor_destroy(&monitor);
}
